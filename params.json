{"name":"$.jedi","body":"Purpose\r\n-------\r\n\r\nDo you have an application with lots of event handlers and you would like to add some new global functionality to them? Normally, you would need to chase down each handler and decorate it individual.\r\nYou would also need to remember to decorate any new handlers. Not a very appealing prospect.\r\n\r\n$.jedi can handle the global decorating for you. Just register a decorator and whenever a new jQuery event handler\r\nis bound, it will be wrapped by all applicable decorators.\r\n\r\nSome decorator usage examples\r\n-----------------------------\r\n\r\nException handling - generally, the event handler is the top of the call stack, so it makes sense to catch exceptions\r\nat this level and do something with them.\r\n\r\nPerformance measuring - same reason as exception handling; nice place to measure how long things take.\r\n\r\nUsage frequency tracking - measure which parts of the application are being used the most.\r\n\r\nLogging/debugging - it's easy to add a decorator, so why not throw one in when you are trying to track down what is\r\nhappening for a particular type of event.\r\n\r\nHow to use it\r\n-------------\r\n\r\n$.jedi('click', decoratorFn);\r\n\r\nExample decorator:\r\n\r\n<pre><code>\r\n$.jedi('click dblclick', function (fn) {\r\n    // this decorator catches all js exceptions and\r\n    // prints them to the console\r\n    // fn - the original event handler\r\n    return function () {\r\n        try {\r\n            // you will probably want to execute the original event handler\r\n            // and return the event handler's results\r\n            return fn.apply(this, arguments);\r\n        } catch (err) {\r\n            console.log(err);\r\n            throw err;\r\n        }\r\n    };\r\n});\r\n</pre></code>\r\n\r\n<pre><code>\r\n$.jedi('click', function (fn) {\r\n    // measure how long it takes to handler this event\r\n    // fn - the original event handler\r\n    return function () {\r\n        var start = $.now();\r\n        var out = fn.apply(this, arguments);\r\n        console.log('took ' + ($.now() - start) + ' ms');\r\n        return out;\r\n    };\r\n});\r\n</pre></code>","tagline":"$.jedi (jQuery Event Decorator Injection) provides the ability to decorate your jQuery event handlers w/o modifying your existing handlers.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}